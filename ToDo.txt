- String só pode ser utilizada em atribuição ou no print OK
- implementar print com string OK
- implementação de atribuição entre vetor de char e string verificando o tamanho do vetor com o tamanho da string OK
- em chamada de função a ordem e os tipos devem ser idênticas ao protótipo OK
- arrumar o genC (também arrumar print) NOTOK
- perguntar para a Tiemi se precisa ter return sempre OK
- criar função para fazer verificação de tipos (verficação entre tipos normais, vetores e entre vetor de char e string)
- verificar com a Tiemi sobre o uso de vetores na declaração e no retorno (se é permitido eles terem tamanhos diferentes)
- arrumar verificacao de return OK

Perguntas para a Tiemi:
- O compilador em C permite nao colocar return em funcoes que nao retornam void, precisa fazer isso no nosso?
- Void pode no nosso compilador ter um return com algum valor dentro dele?? Pq em c pode ser feito, só retornando um warning
- Como deve ser o genC de um print com diveras expressoes diferentes? Deve ser espacado por enter, espaco, etc??
- Pode ter string com uso de operadores auxiliares na atribuição (+. -. !)
- Pode ter string dentro de parênteses
- Verificar se call pode ser usado fora de atribuição, por exemplo chamar um int sem fazer atribuição a uma variável
- Verificar se o & é necessário no ReadChar, ReadDouble e ReadInteger (vetor e variável simples) (genC)

- Novas perguntas:
- Como funciona o return de funcoes do tipi "int[10] funcao1() {}", precisa retornar obrigatoriamente um vetor com 10 posicoes???
- Como funciona o readChar/Double/Int com vetor? Ex: int[10] asd; asd := readInt();
- Perguntar novamente do return("O return pode ser usado dentro de qualquer função, mas o tipo de expressão retornada deve ser igual ao tipo de retorno com que a função foi declarada.")